

/**
 *  Function that generates the Collatz sequence fo a given input n
 *
 *  - Parameter n: positive integer that starts the sequence
 *  - Returns: An array ,`sequence`, of integers representing the Collatz sequence starting from input n
 *  - Complexity: Both space and time are O(k) where k is the number of steps until the function reaches 1.
 *  The reason is that the function uses a while loop that continues until the current value of the sequence is 1,
 *  and within the loop, it performs a constant number of operations (a modulo operation, a division or multiplication
 *  and an addition) each time it enters the loop. The number of steps it takes for the sequence to reach 1 is related
 *  to the input value, k is the number of steps that are needed to reach 1 from the given input, so the time complexity
 *   is directly proportional to the number of steps in the Collatz sequence, k.
 *
 *  The Collatz Conjecture is an unsolved problem in mathematics that suggests
 *  that for any positive integer n, the sequence generated by the Collatz function will always
 *  eventually reach the number 1.
 *  This function applies the conjecture and generates the Collatz sequence of the input number
 */
func collatz(_ n: Int) -> [Int] {
    var sequence = [n]
    var current = n
    while current != 1 {
        if current % 2 == 0 {
            current = current / 2
        } else {
            current = current * 3 + 1
        }
        sequence.append(current)
    }
    return sequence
}

import XCTest

final class Day210: XCTestCase {
    func test() {
        XCTAssertEqual(collatz(27).last!, 1)
    }
}
